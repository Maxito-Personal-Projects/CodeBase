#version 410 core
layout(triangles) in;
layout (triangle_strip, max_vertices=3) out;

// receiving 3 vertex from vertex shader
in VS_OUT{
    vec3 gvecColor;
    vec3 gfragPos;
}gs_in[];

out vec3 normal;
out vec3 vecColor;
out vec3 fragPos;

uniform mat4 Model;

void main()
{
    vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);
    vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);
    normal = normalize(cross(a, b));
    normal = mat3(transpose(inverse(Model)))*normal;
    
    //we have to work with each vertex 
    for(int i = 0; i<gl_in.length(); ++i)
    {
        //mandatory to pass the glpos of each vertex
        gl_Position = gl_in[i].gl_Position;
        fragPos=gs_in[i].gfragPos;
        vecColor=gs_in[i].gvecColor;
        EmitVertex();
    }
} 