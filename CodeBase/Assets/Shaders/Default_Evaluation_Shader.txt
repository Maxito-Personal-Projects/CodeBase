#version 440 core
layout(quads, equal_spacing, ccw) in;
layout (binding = 0, rgba8) uniform coherent image2D exportTexture;


uniform mat4 View;
uniform mat4 Projection;
uniform float maxHeight;
uniform float seed;
uniform int gridSize;

in vec3 WorldPos_ES_in[];
in vec3 Normal_ES_in[];
in vec3 Color_ES_in[];

out vec3 WorldPos_FS_in;
out vec3 Normal_FS_in;
out vec3 Color_FS_in;
vec3 texColor_FS_in;
out vec3 TFPosition;
out vec3 TFNormal;

uniform sampler2D heightmap;
uniform sampler2D outputTexture;

uniform float delta;
uniform float freq;
uniform int octaves;

uniform bool brownian_b;
uniform bool perlin_b;
uniform bool heightmap_b;
uniform bool voronoi_b;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2,vec3 v3)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float rand(vec2 n) 
{ 
    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * (43758.5453+seed));
}

vec2 Hash_1(vec2 c)
{
    //Non Correlated coords
	float x = fract(sin(dot(vec2(float(c.x),float(c.y)) ,vec2(12.9898,78.233))) * (43758.5453+seed));
    float y = fract(sin(dot(c+0.5 ,vec2(12.9898,78.233))) * (43758.5453+seed));
    
    //returning the value converted from range [0,1.0] to [-1.0,1.0]
	return vec2(2.0*x-1.0,2.0*y-1.0);
}

vec2 Hash_2( in vec2 x )  // from https://www.shadertoy.com/view/XdXGW8
{
    vec2 k = vec2( 0.3183099+seed, 0.3678794+seed);
    x = x*k + k.yx;
    return normalize(-1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) ));
}

//Random Values between 0 & 1
vec2 Random(vec2 c)
{
    //Non Correlated coords
	float x = fract(sin(dot(c ,vec2(12.9898,78.233))) * (43758.5453+seed));
    float y = fract(sin(dot(c+0.5 ,vec2(12.9898,78.233))) * (43758.5453+seed));
    
	return vec2(x,y);
}

float Bnoise(vec2 vertexCoords, float frequency)
{	
    vec2 uv = vertexCoords*freq*frequency;
    vec2 tile = floor(uv);
    
    vec2 tile_right = vec2(tile.x+1.0,tile.y);
    vec2 tile_up = vec2(tile.x,tile.y+1.0);
    vec2 tile_diag = vec2(tile.x+1.0,tile.y+1.0);

    float tileColor_1 = rand(tile);
    float tileColor_2 = rand(tile_right);
    float tileColor_3 = rand(tile_up);
    float tileColor_4 = rand(tile_diag);
    
    float mixFactor_x=smoothstep(0.0,1.0,fract(uv.x));
    
    float mix_1=mix(tileColor_1,tileColor_2,mixFactor_x);
    float mix_2=mix(tileColor_3,tileColor_4,mixFactor_x);
    
    float mixFactor_y = smoothstep(0.0,1.0,fract(uv.y));

    float finalMix=mix(mix_1,mix_2,mixFactor_y);
    
    return finalMix;
}

float BrownianNoise(float x, float y)
{
	int pX = gl_PrimitiveID/gridSize;
	int pY = gl_PrimitiveID%gridSize;
	vec2 patchCoords = vec2(pX,pY);
    float height = 0.0;
    float a =0.5;
    float f=1.0;
	vec2 coords = vec2(x,y)+patchCoords.yx;
    
    for(int i=0; i<octaves;i++)
    {
        height += a*Bnoise(coords,f);
        a*=0.5;
        f*=2.0;
    }
    
    return height;
}

float Pnoise(vec2 fragCoord, float frequency)
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord;
    //turnin to Range [0,10] = [0,..,0.1,..,0.2,....9.8,..,9.9,..,10.0]
    uv*=freq*frequency;
    //Converting decimals to integers [1,1,1,.....2,2,2,....,10,10,10]
    vec2 tile = floor(uv);
    
    //Bottom Left Corner
    vec2 botLeft = tile;						//Tile Coords
    vec2 botLeftG = Hash_1(botLeft);				//Setting Random Gradient 
    vec2 offsetBL = uv - botLeft;				//Distance vector from coords to Corner (Now yes :D)
    float dotBL=dot(botLeftG,offsetBL);			//Dot between distance and Corner
    
    //Bottom Right Corner
    vec2 botRight = tile+vec2(1.0,0.0);
    vec2 botRightG = Hash_1(botRight);
    vec2 offsetBR = uv - botRight;
    float dotBR=dot(botRightG,offsetBR);
    
    //Top Left Corner
    vec2 topLeft = tile+vec2(0.0,1.0);
    vec2 topLeftG = Hash_1(topLeft);
    vec2 offsetTL = uv - topLeft;
    float dotTL=dot(topLeftG,offsetTL);
    
    //Top Left Corner
    vec2 topRight = tile+vec2(1.0,1.0);
    vec2 topRightG = Hash_1(topRight);
    vec2 offsetTR = uv - topRight;
    float dotTR=dot(topRightG,offsetTR);
    
    
    float mixFactor_x=smoothstep(0.0,1.0,fract(uv.x)); //mix factor depending on the x coords 
    float mixFactor_y=smoothstep(0.0,1.0,fract(uv.y)); //mix factor depending on the y coords 

    
    float RLBR = mix(dotBL,dotBR,mixFactor_x);
    float TLTR = mix(dotTL,dotTR,mixFactor_x);
    
    float total = mix(RLBR,TLTR,mixFactor_y);

    return (total+1.0)*0.5;
}

//Different Levels of Detail 
float PerlinNoise(float x, float y)
{
	int pX = gl_PrimitiveID/gridSize;
	int pY = gl_PrimitiveID%gridSize;
	vec2 patchCoords = vec2(pX,pY);
    float height = 0.0;
    float a =0.5;
    float f=1.0;
	vec2 coords = vec2(x,y)+patchCoords.yx;
    
   	for(int i=0; i<octaves;i++)
   	{
    	height += a*Pnoise(coords,f);
        a*=0.5;
        f*=2.0;
   	}
    
    return height;
}

float Vnoise(vec2 fragCoord,float frequency)
{
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord;
    //uv = uv*freq*frequency;
    //
    //vec2 tile = floor(uv);
    //float centerDistance = 100.0;
    //float borderDistance = 100.0;
    //vec2 center = vec2(0.0);
	//
    //
    ////Searching the distance to the nearest center
    //for(int i=-1; i<2 ; ++i)
    //{
    //    for(int j=-1;j<2;++j)
    //    {
    //        vec2 tempTile=tile+vec2(i,j);
    //        vec2 tempCenter = tempTile+Random(tempTile);
    //        float tempDist = length(tempCenter-uv);
    //        
    //        if(tempDist<centerDistance)
    //        {
    //            centerDistance=tempDist;
    //            center = tempCenter;
    //        }
    //    }
    //}
    //
    ////Searching the distance to the nearest border
    //for(int i=-1; i<2 ; ++i)
    //{
    //    for(int j=-1;j<2;++j)
    //    {
    //        vec2 tempTile=tile+vec2(i,j);
    //        vec2 tempCenter = tempTile+Random(tempTile);
    //        
    //        vec2 tempDist = tempCenter-uv;
    //        vec2 closeDiff = center-uv;
    //    	
    //        float check = length(tempCenter - center);
    //        
    //        if(check>0.0001)
    //        {
    //            vec2 toCenter = (closeDiff + tempDist)/2.0;
    //            vec2 cellDiff = normalize(tempDist-closeDiff);
    //            float edgeDistance = dot(toCenter,cellDiff);
    //            
    //            if(borderDistance>edgeDistance)
    //            {
    //            	borderDistance=edgeDistance;
    //            }
    //        }
    //    }
    //}
    //        
    //return borderDistance;
	
	vec2 uv = fragCoord;
    uv = uv * freq * frequency;
    
    vec2 g = floor(uv), tile; uv -= g;
	
	vec3 d = vec3(10); // 1.4, etc. "d.z" holds the distance comparison value.
    
	for(int y = -1; y <= 1; y++){
		for(int x = -1; x <= 1; x++){
            
            //Position
			tile = vec2(x, y);
            
            // Distance to random center
            tile += Random(g + tile) - uv;
            
            //Absolute ditsnce
			d.z = dot(tile,tile); 
            
            d.y = max(d.x, min(d.y, d.z));
            d.x = min(d.x, d.z); 
		}
	}
	
    return max(d.y/1.2 - d.x*1., 0.)/1.2;; 
}

//Accumulative noise
float VoronoiNoise(float x, float y)
{
	float height = 0.0;
    float a =0.5;
    float f=1.0;
	
	int pX = gl_PrimitiveID/gridSize;
	int pY = gl_PrimitiveID%gridSize;
	vec2 patchCoords = vec2(pX,pY);

	vec2 coords = vec2(x,y)+patchCoords.yx;
    
   	for(int i=0; i<octaves;i++)
   	{
    	height += a*Vnoise(coords,f);
        a*=0.5;
        f*=2.0;
   	}
    
    return height;
}

float ReadHeightmap(float x, float y)
{
	int pX = gl_PrimitiveID/gridSize;
	int pY = gl_PrimitiveID%gridSize;
	
	vec2 patchCoords = vec2(pX,pY);
	
	return texture(heightmap,(vec2(x,y)+patchCoords.yx)/gridSize).x;
}

//      z0 
//       |     
//z1 --  M -- z2
//       |     
//      z3 

vec3 GetVertex(float deltaX, float deltaY)
{
	//float u = gl_TessCoord.x+deltaX;
	//float omu = 1 - u; // one minus "u"
	//float v = gl_TessCoord.y+deltaY;
	//float omv = 1 - v; // one minus "v"
	
	vec3 p1 = mix(WorldPos_ES_in[0], WorldPos_ES_in[1], gl_TessCoord.x+deltaX);
	vec3 p2 = mix(WorldPos_ES_in[3], WorldPos_ES_in[2], gl_TessCoord.x+deltaX);
	
	return mix(p1, p2, gl_TessCoord.y+deltaY);
	
	//return omu * omv * WorldPos_ES_in[0] + u * omv * WorldPos_ES_in[1] +
	//u * v * WorldPos_ES_in[2] + omu * v * WorldPos_ES_in[3];
}

vec3 GetVertexNormal()
{
	vec3 ret=vec3(0.0);
	float tl,l,bl,t,b,tr,r,br;
	
	// vec3 z0 = GetVertex(0.0,delta);
	// z0.y = BrownianNoise(gl_TessCoord.x,gl_TessCoord.y+delta)*maxHeight;
	
	// vec3 z1 = GetVertex(-delta,0.0);
	// z1.y = BrownianNoise(gl_TessCoord.x-delta,gl_TessCoord.y)*maxHeight;
	
	// vec3 z2 = GetVertex(delta,0.0);
	// z1.y = BrownianNoise(gl_TessCoord.x+delta,gl_TessCoord.y)*maxHeight;
	
	// vec3 z3 = GetVertex(0.0,-delta);
	// z3.y = BrownianNoise(gl_TessCoord.x,gl_TessCoord.y-delta)*maxHeight;
	
	// vec3 A = z3-z0;
	// vec3 B = z2-z1;
	
	// ret = normalize(cross(A,B));
	
	if(brownian_b)
	{
		tl = BrownianNoise(gl_TessCoord.x-delta,gl_TessCoord.y+delta);
		l = BrownianNoise(gl_TessCoord.x-delta,gl_TessCoord.y);
		bl = BrownianNoise(gl_TessCoord.x-delta,gl_TessCoord.y-delta);
		t = BrownianNoise(gl_TessCoord.x,gl_TessCoord.y+delta);
		b = BrownianNoise(gl_TessCoord.x,gl_TessCoord.y-delta);
		tr = BrownianNoise(gl_TessCoord.x+delta,gl_TessCoord.y+delta);
		r = BrownianNoise(gl_TessCoord.x+delta,gl_TessCoord.y);
		br = BrownianNoise(gl_TessCoord.x+delta,gl_TessCoord.y-delta);
	}
	if(perlin_b)
	{
		tl = PerlinNoise(gl_TessCoord.x-delta,gl_TessCoord.y+delta);
		l = PerlinNoise(gl_TessCoord.x-delta,gl_TessCoord.y);
		bl = PerlinNoise(gl_TessCoord.x-delta,gl_TessCoord.y-delta);
		t = PerlinNoise(gl_TessCoord.x,gl_TessCoord.y+delta);
		b = PerlinNoise(gl_TessCoord.x,gl_TessCoord.y-delta);
		tr = PerlinNoise(gl_TessCoord.x+delta,gl_TessCoord.y+delta);
		r = PerlinNoise(gl_TessCoord.x+delta,gl_TessCoord.y);
		br = PerlinNoise(gl_TessCoord.x+delta,gl_TessCoord.y-delta);
	}
	if(voronoi_b)
	{
		tl = VoronoiNoise(gl_TessCoord.x-delta,gl_TessCoord.y+delta);
		l = VoronoiNoise(gl_TessCoord.x-delta,gl_TessCoord.y);
		bl = VoronoiNoise(gl_TessCoord.x-delta,gl_TessCoord.y-delta);
		t = VoronoiNoise(gl_TessCoord.x,gl_TessCoord.y+delta);
		b = VoronoiNoise(gl_TessCoord.x,gl_TessCoord.y-delta);
		tr = VoronoiNoise(gl_TessCoord.x+delta,gl_TessCoord.y+delta);
		r = VoronoiNoise(gl_TessCoord.x+delta,gl_TessCoord.y);
		br = VoronoiNoise(gl_TessCoord.x+delta,gl_TessCoord.y-delta);
	}
	if(heightmap_b)
	{
		tl = ReadHeightmap(gl_TessCoord.x-delta,gl_TessCoord.y+delta);
		l = ReadHeightmap(gl_TessCoord.x-delta,gl_TessCoord.y);
		bl = ReadHeightmap(gl_TessCoord.x-delta,gl_TessCoord.y-delta);
		t = ReadHeightmap(gl_TessCoord.x,gl_TessCoord.y+delta);
		b = ReadHeightmap(gl_TessCoord.x,gl_TessCoord.y-delta);
		tr = ReadHeightmap(gl_TessCoord.x+delta,gl_TessCoord.y+delta);
		r = ReadHeightmap(gl_TessCoord.x+delta,gl_TessCoord.y);
		br = ReadHeightmap(gl_TessCoord.x+delta,gl_TessCoord.y-delta);
	}
	
	// sobel filter
	float dX = (tl + 2.0 * l + bl) - (tr + 2.0 * r + br);
	float dY = (bl + 2.0 * b + br) - (tl + 2.0 * t + tr);
	float dZ = 1.0/maxHeight;
	
	// vec3 vertical = vec3(0.0,z3.y-z0.y/maxHeight,2.0);
	// vec3 horizontal = vec3(2.0,z2.y-z1.y/maxHeight,0.0);
	
	ret = normalize(vec3(dX,dZ,dY));
	return ret;
}

void main()
{		
	WorldPos_FS_in = GetVertex(0.0,0.0);
	
	int pX = gl_PrimitiveID/gridSize;
	int pY = gl_PrimitiveID%gridSize;
	
	vec2 patchCoords = vec2(pX,pY);
	
	ivec2 pix_coord = ivec2(((gl_TessCoord.xy+patchCoords.yx)/gridSize)*100);

    Normal_FS_in = GetVertexNormal();
	float height=0.0;
	
	if(brownian_b)
	{
		height = BrownianNoise(gl_TessCoord.x,gl_TessCoord.y);
	}
	if(perlin_b)
	{
		height = PerlinNoise(gl_TessCoord.x,gl_TessCoord.y);
	}
	if(voronoi_b)
	{
		height = VoronoiNoise(gl_TessCoord.x,gl_TessCoord.y);
	}
	if(heightmap_b)
	{
		height = ReadHeightmap(gl_TessCoord.x,gl_TessCoord.y);
	}
		
	WorldPos_FS_in.y = height*maxHeight;
	//WorldPos_FS_in.y = 0.0;
	
	Color_FS_in = vec3(0.5);
	
	if(height <0.09)
	{
		Color_FS_in = vec3(0.25,0.88,0.82);
	}
	else if(height > 0.09 && height <= 0.1)
	{
		Color_FS_in = vec3(0.94,0.81,0.42);
	}
	else if(height > 0.1 && height <= 0.6)
	{
		Color_FS_in = vec3(0.49,0.78,0.31);
	}
	else if(height >0.6 && height <= 0.8)
	{
		Color_FS_in = vec3(0.72,0.69,0.61);
	}
	else
	{
		Color_FS_in = vec3(1.0);
	}
	
	//Color_FS_in = vec3(height);
	//Color_FS_in =texture(heightmap,gl_TessCoord.xy).xyz;
	
	texColor_FS_in = vec3(height);
	
	imageStore(exportTexture, pix_coord, vec4(texColor_FS_in, 1.0));


	gl_Position = Projection * View * vec4(WorldPos_FS_in, 1.0);
	TFPosition = WorldPos_FS_in;
	TFNormal = Normal_FS_in;
}