#version 410 core
layout(triangles, equal_spacing, ccw) in;

uniform mat4 View;
uniform mat4 Projection;
//uniform float time;

in vec3 WorldPos_ES_in[];
in vec3 Normal_ES_in[];
in vec3 Color_ES_in[];

out vec3 WorldPos_FS_in;
out vec3 Normal_FS_in;
out vec3 Color_FS_in;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float rand(vec2 n) 
{ 
    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 vertexCoords)
{
    vec2 tile = vec2(vertexCoords/100.0);
    vec2 tileMax = floor(tile);
    
    vec2 tile_right = vec2(tileMax.x+1.0,tileMax.y);
    vec2 tile_up = vec2(tileMax.x,tileMax.y+1.0);
    vec2 tile_diag = vec2(tileMax.x+1.0,tileMax.y+1.0);

    float tileColor_1 = rand(tileMax);
    float tileColor_2 = rand(tile_right);
    float tileColor_3 = rand(tile_up);
    float tileColor_4 = rand(tile_diag);
    
    float mixFactor_x=smoothstep(0.0,1.0,fract(vertexCoords/100.0).x);
    
    float mix_1=mix(tileColor_1,tileColor_2,mixFactor_x);
    float mix_2=mix(tileColor_3,tileColor_4,mixFactor_x);
    
    float mixFactor_y = smoothstep(0.0,1.0,fract(vertexCoords/100.0).y);

    float finalMix=mix(mix_1,mix_2,mixFactor_y);
    
    return finalMix;
}

float BrownianNoise(float x, float y)
{
	vec2 coords = vec2(x,y);
    float height = 0.0;
    float a =0.5;
    float f=1.0;
    
    for(int i=0; i<8;i++)
    {
        height += a*noise(f*coords);
        a*=0.5;
        f*=2.0;
    }
    
    return height;
}

void main()
{
	Normal_FS_in = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);
    Normal_FS_in = normalize(Normal_FS_in);
	WorldPos_FS_in = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);
	Color_FS_in = vec3(BrownianNoise(WorldPos_FS_in.x,WorldPos_FS_in.z));
	WorldPos_FS_in.y = BrownianNoise(WorldPos_FS_in.x,WorldPos_FS_in.z)*100.0;
	gl_Position = Projection * View * vec4(WorldPos_FS_in, 1.0);
}