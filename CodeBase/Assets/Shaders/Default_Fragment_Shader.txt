#version 410 core
out vec4 FragColor;

in vec3 WorldPos_FS_in;
in vec3 Normal_FS_in;
in vec3 Color_FS_in;

uniform vec3 lightPos;
uniform mat4 Model;

void main()
{
	vec3 vecColor = Color_FS_in;
	vec3 normal = Normal_FS_in;
	vec3 fragPos = WorldPos_FS_in;

    vec3 lightColor = vec3(1.0);

    // ambient
    float ambientStrength = 0.9;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(normal);
	//vec3 norm = mat3(transpose(inverse(Model))) * Normal_FS_in;  
    vec3 lightDir = normalize(lightPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
            
    vec3 result = (ambient + diffuse) * vecColor;
    FragColor = vec4(result, 1.0);
} 